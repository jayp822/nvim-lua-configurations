Mapping for Neo-Tree

===============================================================================
MAPPINGS                                                                      ~
===============================================================================
                                                            *neo-tree-mappings*

HELP                                                            *neo-tree-help*

? = show_help: Shows a popup window with all of the mappings for the current
               Neotree window. Pressing one of those keys will close the help
               screen and execute the chosen command in the original Neotree
               window. NOTE that selecting a line in the help window and
               pressing enter will not execute that command, it will just
               execute whatever the enter key is mapped to.


NAVIGATION                                                *neo-tree-navigation*

Within the neo-tree window, for the filesystem source, the following mappings
are defined by default. All built-in commands are listed here but some are not 
mapped by default. See |neo-tree-custom-commands| for details on how to use them
in a custom mapping.

Note: The "selected" item is the line the cursor is currently on.

<             = prev_source: Switches to the previous source.

>             = next_source: Switches to the next source.

<bs>          = navigate_up: Moves the root directory up one level.

.             = set_root:    Changes the root directory to the currently 
                             selected folder.

<space>       = toggle_node  Expand or collapse a node with children, which
                             may be a directory or a nested file.

<2-LeftMouse> = open:        Expand or collapse a folder. If a file is selected,
                             open it in the window closest to the tree.

<cr>          = open:        Same as above.

C             = close_node:  Close node if it is open, else close it's parent.

z         = close_all_nodes: Close all nodes in the tree.

         close_all_subnodes: Same as "close_node", but also recursively collapse
                             all subnodes, similar to "close_all_nodes"

           expand_all_nodes: Expand all directory nodes in the tree recursively.

P          = toggle_preview: Toggles "preview mode", see |neo-tree-preview-mode| 

l           = focus_preview: Focus the active preview window

<esc>      = revert_preview: Ends "preview_mode" if it is enabled, and reverts
                             any preview windows to what was being shown before
                             preview mode began.

S             = open_split:  Same as open, but opens in a new horizontal split.

s             = open_vsplit: Same as open, but opens in a vertical split.

         open_rightbelow_vs: Same as open_vsplit, but opens in a right window
                             of the vertical split.

          open_leftabove_vs: Same as open_vsplit, but opens in a left window
                             of the vertical split.

t             = open_tabnew: Same as open, but opens in a new tab.

                  open_drop: Same as open, but opens with the |:drop| command. 

              open_tab_drop: Same as open, but opens in a new tab with the 
                             |:drop| command with the |:tab| modifier. 

w = open_with_window_picker: Uses the `window-picker` plugin to select a window
                             to open the selected node in. Requires that
                             https://github.com/s1n7ax/nvim-window-picker
                             be installed.

   split_with_window_picker: Same as `open_with_window_picker` but opens split
                             in selected node instead.

  vsplit_with_window_picker: Same as `open_with_window_picker` but opens
                             vertical split in selected node instead.

[g      = prev_git_modified: Jump to the previous file reported by `git status`
                             that is within the current working directory.
                             This will loop around if you are on the last one.

]g      = next_git_modified: Jump to the next file reported by `git status`
                             that is within the current working directory.
                             This will loop around if you are on the last one.


FILE ACTIONS                                            *neo-tree-file-actions*
a    = add:                  Create a new file OR directory. Add a `/` to the
                             end of the name to make a directory. This command
                             supports an optional `config.show_path` option
                             which controls what portion of the path is shown
                             in the prompt. The choices for this option are:

                             `"none"`:     which is the default.
                             `"relative"`: shows the portion which is relative
                                         to the current root of the tree.
                             `"absolute"`: is the full path to the current
                                         directory.

                             The file path also supports BASH style brace
                             expansion. sequence style ("{00..05..2}") as well
                             as nested braces. Here are some examples how this
                             expansion works.

                             "x{a..e..2}"           : "xa", "xc", "xe"
                             "file.txt{,.bak}"      : "file.txt", "file.txt.bak"
                             "./{a,b}/{00..02}.lua" : "./a/00.lua", "./a/01.lua",
                                                      "./a/02.lua", "./b/00.lua",
                                                      "./b/01.lua", "./b/02.lua"

A    = add_directory:        Create a new directory, in this mode it does not
                             need to end with a `/`. The path also supports
                             BASH style brace expansion as explained in `add`
                             command. Also accepts `config.show_path` options

d    = delete:               Delete the selected file or directory.
                             Supports visual selection.~

i    = show_file_details     Show file details in popup window, such as size
                             and last modified date.

r    = rename:               Rename the selected file or directory.

y    = copy_to_clipboard:    Mark file to be copied.
                             Supports visual selection.~

x    = cut_to_clipboard:     Mark file to be cut (moved).
                             Supports visual selection.~

p    = paste_from_clipboard: Copy/move each marked file to the selected folder.

c    = copy:                 Copy the selected file or directory.
                             Also accepts the optional `config.show_path` option
                             like the add file action.

m    = move:                 Move the selected file or directory.
                             Also accepts the optional `config.show_path` option
                             like the add file action.


VIEW CHANGES                                            *neo-tree-view-changes*
H  = toggle_hidden:  Toggle whether hidden (filtered items) are shown or not.

R  = refresh:        Rescan the filesystem and redraw the tree. Changes made 
                     within nvim should be detected automatically, but this is
                     useful for changes made elsewhere.

o  = order_by...     Show help menu for order by choices.

oc = ...created:     Sort the tree by created date.

od = ...diagnostics: Sort by diagnostic severity.

og = ...git_status:  Sort by git status.

om = ...modified:    Sort by last modified date.

on = ...name:        Sort by name (default sort).

os = ...size:        Sort by size.

ot = ...type:        Sort by type.


FILTER                                                        *neo-tree-filter*

NOTE: All of the below commands are affected by the `find_by_full_path_words`
option:
>lua
    require("neo-tree").setup({
      filesystem = {
        find_by_full_path_words = false,  
      }
    })
<
`false` means it only searches the tail of a path and is the default.
`true` will change the filter into a full path search with space as an implicit
`".*"`, so `fi init` will match: `./sources/filesystem/init.lua`


/ = fuzzy_finder:           Filter the tree recursively, searching for
                            files and folders that contain the specified term as
                            you type. This will use fd if it is installed, or 
                            find, or which if you are on Windows.

                            As of v1.28, this acts like a fuzzy finder,
                            meaning that pressing up/down while the filter
                            window is open will move the cursor up and down in
                            the tree, and pressing `<enter>` will open that
                            item and clear the filter. Any other method of
                            closing the filter window will also clear the
                            filter.

D = fuzzy_finder_directory: Like fuzzy_finder above, but only shows directories.
                            Pressing <enter> on a directory will clear the
                            search and set the focus on that directory.
                            Requires `fd` or `find` to be installed~

# = fuzzy_sorter:           Sort the tree recursively based on fzy algorithm,
                            showing top score files. Space separated keywords
                            are treated as `and` which will be useful to narrow
                            down as you type. The file list is taken from fd
                            and other programs mentioned in `fuzzy_finder`.
                            `fuzzy_sorter_directory` can be used to show list
                            of directories instead.

f = filter_on_submit:       Same as above, but does not search until you hit
                            enter. Useful if filter_as_you_type is too slow.
                            Also useful if you want to leave the tree
                            filtered.

<C-x> = clear_filter:       Removes the filter.
